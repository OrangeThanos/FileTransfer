// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/User.proto

#include "protos/User.pb.h"
#include "protos/User.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* UserAuthorization_method_names[] = {
  "/UserAuthorization/Connect",
  "/UserAuthorization/Ping",
};

std::unique_ptr< UserAuthorization::Stub> UserAuthorization::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserAuthorization::Stub> stub(new UserAuthorization::Stub(channel, options));
  return stub;
}

UserAuthorization::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(UserAuthorization_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(UserAuthorization_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status UserAuthorization::Stub::Connect(::grpc::ClientContext* context, const ::UserLogin& request, ::UserInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UserLogin, ::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void UserAuthorization::Stub::async::Connect(::grpc::ClientContext* context, const ::UserLogin* request, ::UserInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UserLogin, ::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void UserAuthorization::Stub::async::Connect(::grpc::ClientContext* context, const ::UserLogin* request, ::UserInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UserInfo>* UserAuthorization::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::UserLogin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UserInfo, ::UserLogin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UserInfo>* UserAuthorization::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::UserLogin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::google::protobuf::Empty>* UserAuthorization::Stub::PingRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::google::protobuf::Empty>::Create(channel_.get(), rpcmethod_Ping_, context, response);
}

void UserAuthorization::Stub::async::Ping(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::google::protobuf::Empty>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::google::protobuf::Empty>::Create(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::google::protobuf::Empty>* UserAuthorization::Stub::AsyncPingRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::google::protobuf::Empty>* UserAuthorization::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, response, false, nullptr);
}

UserAuthorization::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAuthorization_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAuthorization::Service, ::UserLogin, ::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserAuthorization::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UserLogin* req,
             ::UserInfo* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAuthorization_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< UserAuthorization::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          [](UserAuthorization::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::google::protobuf::Empty>* reader,
             ::google::protobuf::Empty* resp) {
               return service->Ping(ctx, reader, resp);
             }, this)));
}

UserAuthorization::Service::~Service() {
}

::grpc::Status UserAuthorization::Service::Connect(::grpc::ServerContext* context, const ::UserLogin* request, ::UserInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAuthorization::Service::Ping(::grpc::ServerContext* context, ::grpc::ServerReader< ::google::protobuf::Empty>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


