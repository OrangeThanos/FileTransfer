// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/Transfer.proto
#ifndef GRPC_protos_2fTransfer_2eproto__INCLUDED
#define GRPC_protos_2fTransfer_2eproto__INCLUDED

#include "protos/Transfer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class FIleTransfer final {
 public:
  static constexpr char const* service_full_name() {
    return "FIleTransfer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>> FileTransferProcessUpload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>>(FileTransferProcessUploadRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>> AsyncFileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>>(AsyncFileTransferProcessUploadRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>> PrepareAsyncFileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>>(PrepareAsyncFileTransferProcessUploadRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>> FileTransferProcessDownload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>>(FileTransferProcessDownloadRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>> AsyncFileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>>(AsyncFileTransferProcessDownloadRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>> PrepareAsyncFileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>>(PrepareAsyncFileTransferProcessDownloadRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::FileTransferProgress>> FIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::FileTransferProgress>>(FIleTransferProgressRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>> AsyncFIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>>(AsyncFIleTransferProgressRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>> PrepareAsyncFIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>>(PrepareAsyncFIleTransferProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>> FileTransferListener(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>>(FileTransferListenerRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>> AsyncFileTransferListener(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>>(AsyncFileTransferListenerRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>> PrepareAsyncFileTransferListener(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>>(PrepareAsyncFileTransferListenerRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::FileTransferPart,::google::protobuf::Empty>* reactor) = 0;
      virtual void FileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Empty,::FileTransferPart>* reactor) = 0;
      virtual void FIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit* request, ::grpc::ClientReadReactor< ::FileTransferProgress>* reactor) = 0;
      virtual void FileTransferListener(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Empty,::FileTransferRequestInit>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>* FileTransferProcessUploadRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>* AsyncFileTransferProcessUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::FileTransferPart, ::google::protobuf::Empty>* PrepareAsyncFileTransferProcessUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>* FileTransferProcessDownloadRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>* AsyncFileTransferProcessDownloadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferPart>* PrepareAsyncFileTransferProcessDownloadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::FileTransferProgress>* FIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>* AsyncFIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileTransferProgress>* PrepareAsyncFIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>* FileTransferListenerRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>* AsyncFileTransferListenerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::Empty, ::FileTransferRequestInit>* PrepareAsyncFileTransferListenerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>> FileTransferProcessUpload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>>(FileTransferProcessUploadRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>> AsyncFileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>>(AsyncFileTransferProcessUploadRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>> PrepareAsyncFileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>>(PrepareAsyncFileTransferProcessUploadRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>> FileTransferProcessDownload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>>(FileTransferProcessDownloadRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>> AsyncFileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>>(AsyncFileTransferProcessDownloadRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>> PrepareAsyncFileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>>(PrepareAsyncFileTransferProcessDownloadRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::FileTransferProgress>> FIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::FileTransferProgress>>(FIleTransferProgressRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileTransferProgress>> AsyncFIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileTransferProgress>>(AsyncFIleTransferProgressRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileTransferProgress>> PrepareAsyncFIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileTransferProgress>>(PrepareAsyncFIleTransferProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>> FileTransferListener(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>>(FileTransferListenerRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>> AsyncFileTransferListener(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>>(AsyncFileTransferListenerRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>> PrepareAsyncFileTransferListener(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>>(PrepareAsyncFileTransferListenerRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FileTransferProcessUpload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::FileTransferPart,::google::protobuf::Empty>* reactor) override;
      void FileTransferProcessDownload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Empty,::FileTransferPart>* reactor) override;
      void FIleTransferProgress(::grpc::ClientContext* context, const ::FileTransferRequestInit* request, ::grpc::ClientReadReactor< ::FileTransferProgress>* reactor) override;
      void FileTransferListener(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::Empty,::FileTransferRequestInit>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* FileTransferProcessUploadRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* AsyncFileTransferProcessUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* PrepareAsyncFileTransferProcessUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* FileTransferProcessDownloadRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* AsyncFileTransferProcessDownloadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* PrepareAsyncFileTransferProcessDownloadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::FileTransferProgress>* FIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request) override;
    ::grpc::ClientAsyncReader< ::FileTransferProgress>* AsyncFIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::FileTransferProgress>* PrepareAsyncFIleTransferProgressRaw(::grpc::ClientContext* context, const ::FileTransferRequestInit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>* FileTransferListenerRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>* AsyncFileTransferListenerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferRequestInit>* PrepareAsyncFileTransferListenerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FileTransferProcessUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_FileTransferProcessDownload_;
    const ::grpc::internal::RpcMethod rpcmethod_FIleTransferProgress_;
    const ::grpc::internal::RpcMethod rpcmethod_FileTransferListener_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* stream);
    virtual ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* stream);
    virtual ::grpc::Status FIleTransferProgress(::grpc::ServerContext* context, const ::FileTransferRequestInit* request, ::grpc::ServerWriter< ::FileTransferProgress>* writer);
    virtual ::grpc::Status FileTransferListener(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FileTransferProcessUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileTransferProcessUpload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FileTransferProcessUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferProcessUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FileTransferProcessDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileTransferProcessDownload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FileTransferProcessDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferProcessDownload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFIleTransferProgress(::grpc::ServerContext* context, ::FileTransferRequestInit* request, ::grpc::ServerAsyncWriter< ::FileTransferProgress>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FileTransferListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileTransferListener() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FileTransferListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferListener(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferListener(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FileTransferProcessUpload<WithAsyncMethod_FileTransferProcessDownload<WithAsyncMethod_FIleTransferProgress<WithAsyncMethod_FileTransferListener<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FileTransferProcessUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FileTransferProcessUpload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::FileTransferPart, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferProcessUpload(context); }));
    }
    ~WithCallbackMethod_FileTransferProcessUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::FileTransferPart, ::google::protobuf::Empty>* FileTransferProcessUpload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FileTransferProcessDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FileTransferProcessDownload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::google::protobuf::Empty, ::FileTransferPart>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferProcessDownload(context); }));
    }
    ~WithCallbackMethod_FileTransferProcessDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Empty, ::FileTransferPart>* FileTransferProcessDownload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::FileTransferRequestInit, ::FileTransferProgress>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FileTransferRequestInit* request) { return this->FIleTransferProgress(context, request); }));
    }
    ~WithCallbackMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::FileTransferProgress>* FIleTransferProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FileTransferListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FileTransferListener() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::google::protobuf::Empty, ::FileTransferRequestInit>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferListener(context); }));
    }
    ~WithCallbackMethod_FileTransferListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferListener(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::Empty, ::FileTransferRequestInit>* FileTransferListener(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FileTransferProcessUpload<WithCallbackMethod_FileTransferProcessDownload<WithCallbackMethod_FIleTransferProgress<WithCallbackMethod_FileTransferListener<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FileTransferProcessUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileTransferProcessUpload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FileTransferProcessUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FileTransferProcessDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileTransferProcessDownload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FileTransferProcessDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FileTransferListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileTransferListener() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FileTransferListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferListener(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileTransferProcessUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileTransferProcessUpload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FileTransferProcessUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferProcessUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileTransferProcessDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileTransferProcessDownload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FileTransferProcessDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferProcessDownload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFIleTransferProgress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileTransferListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileTransferListener() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FileTransferListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferListener(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileTransferListener(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FileTransferProcessUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FileTransferProcessUpload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferProcessUpload(context); }));
    }
    ~WithRawCallbackMethod_FileTransferProcessUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::FileTransferPart>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FileTransferProcessUpload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FileTransferProcessDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FileTransferProcessDownload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferProcessDownload(context); }));
    }
    ~WithRawCallbackMethod_FileTransferProcessDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferProcessDownload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferPart, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FileTransferProcessDownload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FIleTransferProgress(context, request); }));
    }
    ~WithRawCallbackMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FIleTransferProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FileTransferListener : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FileTransferListener() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FileTransferListener(context); }));
    }
    ~WithRawCallbackMethod_FileTransferListener() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileTransferListener(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::FileTransferRequestInit, ::google::protobuf::Empty>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FileTransferListener(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FIleTransferProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FIleTransferProgress() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::FileTransferRequestInit, ::FileTransferProgress>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::FileTransferRequestInit, ::FileTransferProgress>* streamer) {
                       return this->StreamedFIleTransferProgress(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FIleTransferProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FIleTransferProgress(::grpc::ServerContext* /*context*/, const ::FileTransferRequestInit* /*request*/, ::grpc::ServerWriter< ::FileTransferProgress>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFIleTransferProgress(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::FileTransferRequestInit,::FileTransferProgress>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FIleTransferProgress<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_FIleTransferProgress<Service > StreamedService;
};


#endif  // GRPC_protos_2fTransfer_2eproto__INCLUDED
