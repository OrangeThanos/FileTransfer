// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/Transfer.proto

#include "protos/Transfer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR FileTransferRequest::FileTransferRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferRequestDefaultTypeInternal() {}
  union {
    FileTransferRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferRequestDefaultTypeInternal _FileTransferRequest_default_instance_;
PROTOBUF_CONSTEXPR FileRecieveRequest::FileRecieveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dstpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileRecieveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileRecieveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileRecieveRequestDefaultTypeInternal() {}
  union {
    FileRecieveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileRecieveRequestDefaultTypeInternal _FileRecieveRequest_default_instance_;
PROTOBUF_CONSTEXPR FileTransferPart::FileTransferPart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.part_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferPartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferPartDefaultTypeInternal() {}
  union {
    FileTransferPart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferPartDefaultTypeInternal _FileTransferPart_default_instance_;
PROTOBUF_CONSTEXPR FileTransferProgress::FileTransferProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fileinfo_)*/nullptr
  , /*decltype(_impl_.currentprogress_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferProgressDefaultTypeInternal() {}
  union {
    FileTransferProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferProgressDefaultTypeInternal _FileTransferProgress_default_instance_;
PROTOBUF_CONSTEXPR FileTransferRequestInit::FileTransferRequestInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dstpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcuser_)*/nullptr
  , /*decltype(_impl_.dstuser_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferRequestInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferRequestInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferRequestInitDefaultTypeInternal() {}
  union {
    FileTransferRequestInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferRequestInitDefaultTypeInternal _FileTransferRequestInit_default_instance_;
PROTOBUF_CONSTEXPR FileTransferError::FileTransferError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferErrorDefaultTypeInternal() {}
  union {
    FileTransferError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferErrorDefaultTypeInternal _FileTransferError_default_instance_;
static ::_pb::Metadata file_level_metadata_protos_2fTransfer_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fTransfer_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fTransfer_2eproto = nullptr;

const uint32_t TableStruct_protos_2fTransfer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileTransferRequest, _impl_.srcfile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileRecieveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileRecieveRequest, _impl_.dstpath_),
  PROTOBUF_FIELD_OFFSET(::FileRecieveRequest, _impl_.fileinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransferPart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileTransferPart, _impl_.part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransferProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileTransferProgress, _impl_.currentprogress_),
  PROTOBUF_FIELD_OFFSET(::FileTransferProgress, _impl_.fileinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransferRequestInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileTransferRequestInit, _impl_.srcfile_),
  PROTOBUF_FIELD_OFFSET(::FileTransferRequestInit, _impl_.srcuser_),
  PROTOBUF_FIELD_OFFSET(::FileTransferRequestInit, _impl_.dstpath_),
  PROTOBUF_FIELD_OFFSET(::FileTransferRequestInit, _impl_.dstuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileTransferError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileTransferError, _impl_.reason_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FileTransferRequest)},
  { 7, -1, -1, sizeof(::FileRecieveRequest)},
  { 15, -1, -1, sizeof(::FileTransferPart)},
  { 22, -1, -1, sizeof(::FileTransferProgress)},
  { 30, -1, -1, sizeof(::FileTransferRequestInit)},
  { 40, -1, -1, sizeof(::FileTransferError)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_FileTransferRequest_default_instance_._instance,
  &::_FileRecieveRequest_default_instance_._instance,
  &::_FileTransferPart_default_instance_._instance,
  &::_FileTransferProgress_default_instance_._instance,
  &::_FileTransferRequestInit_default_instance_._instance,
  &::_FileTransferError_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fTransfer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025protos/Transfer.proto\032\033google/protobuf"
  "/empty.proto\032\022protos/Files.proto\032\021protos"
  "/User.proto\"&\n\023FileTransferRequest\022\017\n\007Sr"
  "cFile\030\001 \001(\t\">\n\022FileRecieveRequest\022\017\n\007Dst"
  "Path\030\001 \001(\t\022\027\n\010fileInfo\030\002 \001(\0132\005.File\" \n\020F"
  "ileTransferPart\022\014\n\004Part\030\001 \001(\014\"H\n\024FileTra"
  "nsferProgress\022\027\n\017CurrentProgress\030\001 \001(\004\022\027"
  "\n\010fileInfo\030\002 \001(\0132\005.File\"s\n\027FileTransferR"
  "equestInit\022\017\n\007SrcFile\030\001 \001(\t\022\032\n\007SrcUser\030\002"
  " \001(\0132\t.UserInfo\022\017\n\007DstPath\030\003 \001(\t\022\032\n\007DstU"
  "ser\030\004 \001(\0132\t.UserInfo\"3\n\021FileTransferErro"
  "r\022\036\n\006reason\030\001 \001(\0162\016.TransferError*\214\001\n\rTr"
  "ansferError\022\022\n\016SRC_DISCONNECT\020\000\022\023\n\017SRC_F"
  "ILEMISSING\020\001\022\024\n\020SRC_ACCESSDENIED\020\002\022\022\n\016DS"
  "T_DISCONNECT\020d\022\022\n\016DST_UNEXPERROR\020e\022\024\n\020DS"
  "T_ACCESSDENIED\020f2\311\002\n\014FIleTransfer\022L\n\031Fil"
  "eTransferProcessUpload\022\021.FileTransferPar"
  "t\032\026.google.protobuf.Empty\"\000(\0010\001\022N\n\033FileT"
  "ransferProcessDownload\022\026.google.protobuf"
  ".Empty\032\021.FileTransferPart\"\000(\0010\001\022K\n\024FIleT"
  "ransferProgress\022\030.FileTransferRequestIni"
  "t\032\025.FileTransferProgress\"\0000\001\022N\n\024FileTran"
  "sferListener\022\026.google.protobuf.Empty\032\030.F"
  "ileTransferRequestInit\"\000(\0010\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fTransfer_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_protos_2fFiles_2eproto,
  &::descriptor_table_protos_2fUser_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fTransfer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fTransfer_2eproto = {
    false, false, 956, descriptor_table_protodef_protos_2fTransfer_2eproto,
    "protos/Transfer.proto",
    &descriptor_table_protos_2fTransfer_2eproto_once, descriptor_table_protos_2fTransfer_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_protos_2fTransfer_2eproto::offsets,
    file_level_metadata_protos_2fTransfer_2eproto, file_level_enum_descriptors_protos_2fTransfer_2eproto,
    file_level_service_descriptors_protos_2fTransfer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fTransfer_2eproto_getter() {
  return &descriptor_table_protos_2fTransfer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fTransfer_2eproto(&descriptor_table_protos_2fTransfer_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fTransfer_2eproto);
  return file_level_enum_descriptors_protos_2fTransfer_2eproto[0];
}
bool TransferError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FileTransferRequest::_Internal {
 public:
};

FileTransferRequest::FileTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileTransferRequest)
}
FileTransferRequest::FileTransferRequest(const FileTransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcfile_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srcfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcfile().empty()) {
    _this->_impl_.srcfile_.Set(from._internal_srcfile(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FileTransferRequest)
}

inline void FileTransferRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcfile_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.srcfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferRequest::~FileTransferRequest() {
  // @@protoc_insertion_point(destructor:FileTransferRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcfile_.Destroy();
}

void FileTransferRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransferRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcfile_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SrcFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileTransferRequest.SrcFile"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransferRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcFile = 1;
  if (!this->_internal_srcfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcfile().data(), static_cast<int>(this->_internal_srcfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileTransferRequest.SrcFile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransferRequest)
  return target;
}

size_t FileTransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransferRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcFile = 1;
  if (!this->_internal_srcfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcfile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferRequest::GetClassData() const { return &_class_data_; }


void FileTransferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferRequest*>(&to_msg);
  auto& from = static_cast<const FileTransferRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileTransferRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcfile().empty()) {
    _this->_internal_set_srcfile(from._internal_srcfile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferRequest::CopyFrom(const FileTransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferRequest::IsInitialized() const {
  return true;
}

void FileTransferRequest::InternalSwap(FileTransferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcfile_, lhs_arena,
      &other->_impl_.srcfile_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[0]);
}

// ===================================================================

class FileRecieveRequest::_Internal {
 public:
  static const ::File& fileinfo(const FileRecieveRequest* msg);
};

const ::File&
FileRecieveRequest::_Internal::fileinfo(const FileRecieveRequest* msg) {
  return *msg->_impl_.fileinfo_;
}
void FileRecieveRequest::clear_fileinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
}
FileRecieveRequest::FileRecieveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileRecieveRequest)
}
FileRecieveRequest::FileRecieveRequest(const FileRecieveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileRecieveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dstpath_){}
    , decltype(_impl_.fileinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dstpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dstpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstpath().empty()) {
    _this->_impl_.dstpath_.Set(from._internal_dstpath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fileinfo()) {
    _this->_impl_.fileinfo_ = new ::File(*from._impl_.fileinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:FileRecieveRequest)
}

inline void FileRecieveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dstpath_){}
    , decltype(_impl_.fileinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dstpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dstpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileRecieveRequest::~FileRecieveRequest() {
  // @@protoc_insertion_point(destructor:FileRecieveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileRecieveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dstpath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fileinfo_;
}

void FileRecieveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileRecieveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FileRecieveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dstpath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileRecieveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DstPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileRecieveRequest.DstPath"));
        } else
          goto handle_unusual;
        continue;
      // .File fileInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileRecieveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileRecieveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DstPath = 1;
  if (!this->_internal_dstpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileRecieveRequest.DstPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dstpath(), target);
  }

  // .File fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fileinfo(this),
        _Internal::fileinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileRecieveRequest)
  return target;
}

size_t FileRecieveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileRecieveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DstPath = 1;
  if (!this->_internal_dstpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  // .File fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileRecieveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileRecieveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileRecieveRequest::GetClassData() const { return &_class_data_; }


void FileRecieveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileRecieveRequest*>(&to_msg);
  auto& from = static_cast<const FileRecieveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileRecieveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dstpath().empty()) {
    _this->_internal_set_dstpath(from._internal_dstpath());
  }
  if (from._internal_has_fileinfo()) {
    _this->_internal_mutable_fileinfo()->::File::MergeFrom(
        from._internal_fileinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileRecieveRequest::CopyFrom(const FileRecieveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileRecieveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRecieveRequest::IsInitialized() const {
  return true;
}

void FileRecieveRequest::InternalSwap(FileRecieveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dstpath_, lhs_arena,
      &other->_impl_.dstpath_, rhs_arena
  );
  swap(_impl_.fileinfo_, other->_impl_.fileinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRecieveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[1]);
}

// ===================================================================

class FileTransferPart::_Internal {
 public:
};

FileTransferPart::FileTransferPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileTransferPart)
}
FileTransferPart::FileTransferPart(const FileTransferPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferPart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.part_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.part_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part().empty()) {
    _this->_impl_.part_.Set(from._internal_part(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FileTransferPart)
}

inline void FileTransferPart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.part_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.part_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferPart::~FileTransferPart() {
  // @@protoc_insertion_point(destructor:FileTransferPart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferPart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.part_.Destroy();
}

void FileTransferPart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferPart::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransferPart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.part_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferPart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_part();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferPart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransferPart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Part = 1;
  if (!this->_internal_part().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_part(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransferPart)
  return target;
}

size_t FileTransferPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransferPart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Part = 1;
  if (!this->_internal_part().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_part());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferPart::GetClassData() const { return &_class_data_; }


void FileTransferPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferPart*>(&to_msg);
  auto& from = static_cast<const FileTransferPart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileTransferPart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_part().empty()) {
    _this->_internal_set_part(from._internal_part());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferPart::CopyFrom(const FileTransferPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransferPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferPart::IsInitialized() const {
  return true;
}

void FileTransferPart::InternalSwap(FileTransferPart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_, lhs_arena,
      &other->_impl_.part_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferPart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[2]);
}

// ===================================================================

class FileTransferProgress::_Internal {
 public:
  static const ::File& fileinfo(const FileTransferProgress* msg);
};

const ::File&
FileTransferProgress::_Internal::fileinfo(const FileTransferProgress* msg) {
  return *msg->_impl_.fileinfo_;
}
void FileTransferProgress::clear_fileinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
}
FileTransferProgress::FileTransferProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileTransferProgress)
}
FileTransferProgress::FileTransferProgress(const FileTransferProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fileinfo_){nullptr}
    , decltype(_impl_.currentprogress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fileinfo()) {
    _this->_impl_.fileinfo_ = new ::File(*from._impl_.fileinfo_);
  }
  _this->_impl_.currentprogress_ = from._impl_.currentprogress_;
  // @@protoc_insertion_point(copy_constructor:FileTransferProgress)
}

inline void FileTransferProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fileinfo_){nullptr}
    , decltype(_impl_.currentprogress_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileTransferProgress::~FileTransferProgress() {
  // @@protoc_insertion_point(destructor:FileTransferProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fileinfo_;
}

void FileTransferProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransferProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fileinfo_ != nullptr) {
    delete _impl_.fileinfo_;
  }
  _impl_.fileinfo_ = nullptr;
  _impl_.currentprogress_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 CurrentProgress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.currentprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .File fileInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransferProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 CurrentProgress = 1;
  if (this->_internal_currentprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_currentprogress(), target);
  }

  // .File fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fileinfo(this),
        _Internal::fileinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransferProgress)
  return target;
}

size_t FileTransferProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransferProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .File fileInfo = 2;
  if (this->_internal_has_fileinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileinfo_);
  }

  // uint64 CurrentProgress = 1;
  if (this->_internal_currentprogress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_currentprogress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferProgress::GetClassData() const { return &_class_data_; }


void FileTransferProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferProgress*>(&to_msg);
  auto& from = static_cast<const FileTransferProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileTransferProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fileinfo()) {
    _this->_internal_mutable_fileinfo()->::File::MergeFrom(
        from._internal_fileinfo());
  }
  if (from._internal_currentprogress() != 0) {
    _this->_internal_set_currentprogress(from._internal_currentprogress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferProgress::CopyFrom(const FileTransferProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransferProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferProgress::IsInitialized() const {
  return true;
}

void FileTransferProgress::InternalSwap(FileTransferProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransferProgress, _impl_.currentprogress_)
      + sizeof(FileTransferProgress::_impl_.currentprogress_)
      - PROTOBUF_FIELD_OFFSET(FileTransferProgress, _impl_.fileinfo_)>(
          reinterpret_cast<char*>(&_impl_.fileinfo_),
          reinterpret_cast<char*>(&other->_impl_.fileinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[3]);
}

// ===================================================================

class FileTransferRequestInit::_Internal {
 public:
  static const ::UserInfo& srcuser(const FileTransferRequestInit* msg);
  static const ::UserInfo& dstuser(const FileTransferRequestInit* msg);
};

const ::UserInfo&
FileTransferRequestInit::_Internal::srcuser(const FileTransferRequestInit* msg) {
  return *msg->_impl_.srcuser_;
}
const ::UserInfo&
FileTransferRequestInit::_Internal::dstuser(const FileTransferRequestInit* msg) {
  return *msg->_impl_.dstuser_;
}
void FileTransferRequestInit::clear_srcuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcuser_ != nullptr) {
    delete _impl_.srcuser_;
  }
  _impl_.srcuser_ = nullptr;
}
void FileTransferRequestInit::clear_dstuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.dstuser_ != nullptr) {
    delete _impl_.dstuser_;
  }
  _impl_.dstuser_ = nullptr;
}
FileTransferRequestInit::FileTransferRequestInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileTransferRequestInit)
}
FileTransferRequestInit::FileTransferRequestInit(const FileTransferRequestInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferRequestInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcfile_){}
    , decltype(_impl_.dstpath_){}
    , decltype(_impl_.srcuser_){nullptr}
    , decltype(_impl_.dstuser_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srcfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcfile().empty()) {
    _this->_impl_.srcfile_.Set(from._internal_srcfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dstpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dstpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dstpath().empty()) {
    _this->_impl_.dstpath_.Set(from._internal_dstpath(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_srcuser()) {
    _this->_impl_.srcuser_ = new ::UserInfo(*from._impl_.srcuser_);
  }
  if (from._internal_has_dstuser()) {
    _this->_impl_.dstuser_ = new ::UserInfo(*from._impl_.dstuser_);
  }
  // @@protoc_insertion_point(copy_constructor:FileTransferRequestInit)
}

inline void FileTransferRequestInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcfile_){}
    , decltype(_impl_.dstpath_){}
    , decltype(_impl_.srcuser_){nullptr}
    , decltype(_impl_.dstuser_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.srcfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dstpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dstpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferRequestInit::~FileTransferRequestInit() {
  // @@protoc_insertion_point(destructor:FileTransferRequestInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferRequestInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcfile_.Destroy();
  _impl_.dstpath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.srcuser_;
  if (this != internal_default_instance()) delete _impl_.dstuser_;
}

void FileTransferRequestInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferRequestInit::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransferRequestInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcfile_.ClearToEmpty();
  _impl_.dstpath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.srcuser_ != nullptr) {
    delete _impl_.srcuser_;
  }
  _impl_.srcuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dstuser_ != nullptr) {
    delete _impl_.dstuser_;
  }
  _impl_.dstuser_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferRequestInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SrcFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileTransferRequestInit.SrcFile"));
        } else
          goto handle_unusual;
        continue;
      // .UserInfo SrcUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string DstPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileTransferRequestInit.DstPath"));
        } else
          goto handle_unusual;
        continue;
      // .UserInfo DstUser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dstuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferRequestInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransferRequestInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcFile = 1;
  if (!this->_internal_srcfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcfile().data(), static_cast<int>(this->_internal_srcfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileTransferRequestInit.SrcFile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcfile(), target);
  }

  // .UserInfo SrcUser = 2;
  if (this->_internal_has_srcuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::srcuser(this),
        _Internal::srcuser(this).GetCachedSize(), target, stream);
  }

  // string DstPath = 3;
  if (!this->_internal_dstpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileTransferRequestInit.DstPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dstpath(), target);
  }

  // .UserInfo DstUser = 4;
  if (this->_internal_has_dstuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dstuser(this),
        _Internal::dstuser(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransferRequestInit)
  return target;
}

size_t FileTransferRequestInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransferRequestInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcFile = 1;
  if (!this->_internal_srcfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcfile());
  }

  // string DstPath = 3;
  if (!this->_internal_dstpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  // .UserInfo SrcUser = 2;
  if (this->_internal_has_srcuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcuser_);
  }

  // .UserInfo DstUser = 4;
  if (this->_internal_has_dstuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dstuser_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferRequestInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferRequestInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferRequestInit::GetClassData() const { return &_class_data_; }


void FileTransferRequestInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferRequestInit*>(&to_msg);
  auto& from = static_cast<const FileTransferRequestInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileTransferRequestInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcfile().empty()) {
    _this->_internal_set_srcfile(from._internal_srcfile());
  }
  if (!from._internal_dstpath().empty()) {
    _this->_internal_set_dstpath(from._internal_dstpath());
  }
  if (from._internal_has_srcuser()) {
    _this->_internal_mutable_srcuser()->::UserInfo::MergeFrom(
        from._internal_srcuser());
  }
  if (from._internal_has_dstuser()) {
    _this->_internal_mutable_dstuser()->::UserInfo::MergeFrom(
        from._internal_dstuser());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferRequestInit::CopyFrom(const FileTransferRequestInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransferRequestInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferRequestInit::IsInitialized() const {
  return true;
}

void FileTransferRequestInit::InternalSwap(FileTransferRequestInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcfile_, lhs_arena,
      &other->_impl_.srcfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dstpath_, lhs_arena,
      &other->_impl_.dstpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileTransferRequestInit, _impl_.dstuser_)
      + sizeof(FileTransferRequestInit::_impl_.dstuser_)
      - PROTOBUF_FIELD_OFFSET(FileTransferRequestInit, _impl_.srcuser_)>(
          reinterpret_cast<char*>(&_impl_.srcuser_),
          reinterpret_cast<char*>(&other->_impl_.srcuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferRequestInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[4]);
}

// ===================================================================

class FileTransferError::_Internal {
 public:
};

FileTransferError::FileTransferError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileTransferError)
}
FileTransferError::FileTransferError(const FileTransferError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reason_ = from._impl_.reason_;
  // @@protoc_insertion_point(copy_constructor:FileTransferError)
}

inline void FileTransferError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileTransferError::~FileTransferError() {
  // @@protoc_insertion_point(destructor:FileTransferError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FileTransferError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferError::Clear() {
// @@protoc_insertion_point(message_clear_start:FileTransferError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransferError reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::TransferError>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTransferError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileTransferError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransferError reason = 1;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileTransferError)
  return target;
}

size_t FileTransferError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileTransferError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransferError reason = 1;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferError::GetClassData() const { return &_class_data_; }


void FileTransferError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferError*>(&to_msg);
  auto& from = static_cast<const FileTransferError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileTransferError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferError::CopyFrom(const FileTransferError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileTransferError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferError::IsInitialized() const {
  return true;
}

void FileTransferError::InternalSwap(FileTransferError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reason_, other->_impl_.reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fTransfer_2eproto_getter, &descriptor_table_protos_2fTransfer_2eproto_once,
      file_level_metadata_protos_2fTransfer_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FileTransferRequest*
Arena::CreateMaybeMessage< ::FileTransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileTransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FileRecieveRequest*
Arena::CreateMaybeMessage< ::FileRecieveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileRecieveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransferPart*
Arena::CreateMaybeMessage< ::FileTransferPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileTransferPart >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransferProgress*
Arena::CreateMaybeMessage< ::FileTransferProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileTransferProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransferRequestInit*
Arena::CreateMaybeMessage< ::FileTransferRequestInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileTransferRequestInit >(arena);
}
template<> PROTOBUF_NOINLINE ::FileTransferError*
Arena::CreateMaybeMessage< ::FileTransferError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileTransferError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
